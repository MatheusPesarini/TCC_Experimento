# Dockerfile m√≠nimo para ambiente de an√°lise
FROM node:lts-alpine

# Instalar apenas depend√™ncias essenciais
RUN apk update && apk add --no-cache \
    bash \
    git \
    curl \
    && rm -rf /var/cache/apk/*

# Definir diret√≥rio de trabalho
WORKDIR /app

# Instalar TypeScript globalmente
RUN npm install -g typescript@latest

# Criar diret√≥rios para relat√≥rios
RUN mkdir -p /app/results/{eslint,jest}

# Copiar package.json e instalar depend√™ncias
COPY package*.json ./
RUN npm install

# Copiar arquivos de configura√ß√£o
COPY tsconfig.json jest.config.js .eslintrc.js ./

# Script de an√°lise simplificado
RUN echo '#!/bin/bash\n\
    set -e\n\
    echo "=== An√°lise de C√≥digo TCC ==="\n\
    echo "Timestamp: $(date)"\n\
    \n\
    # Verificar c√≥digo fonte\n\
    if [ ! -d "/app/src" ]; then\n\
    echo "‚ùå C√≥digo fonte n√£o encontrado em /app/src"\n\
    exit 1\n\
    fi\n\
    \n\
    echo "üìÅ C√≥digo fonte encontrado"\n\
    \n\
    # Compilar TypeScript\n\
    echo "üî® Compilando TypeScript..."\n\
    npm run build || echo "‚ö†Ô∏è Problemas na compila√ß√£o"\n\
    \n\
    # Executar testes\n\
    echo "üß™ Executando testes..."\n\
    npm run test:coverage || echo "‚ö†Ô∏è Problemas nos testes"\n\
    if [ -d "coverage" ]; then\n\
    cp -r coverage/* /app/results/jest/ 2>/dev/null || true\n\
    fi\n\
    \n\
    # An√°lise ESLint\n\
    echo "üîç Executando ESLint..."\n\
    npm run lint -- --format=json --output-file=/app/results/eslint/eslint-report.json || true\n\
    npm run lint -- --format=html --output-file=/app/results/eslint/eslint-report.html || true\n\
    \n\
    # Resumo\n\
    echo "‚úÖ An√°lise conclu√≠da!"\n\
    echo "üìä Resultados em /app/results/"\n\
    ls -la /app/results/*/\n\
    ' > /usr/local/bin/analyze.sh && chmod +x /usr/local/bin/analyze.sh

# Comando padr√£o
CMD ["analyze.sh"]
